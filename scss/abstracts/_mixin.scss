@use './function' as fun;
@use './variables/width' as width;

//border for debugging
@mixin test {
  border: 1px solid red;
}
//border for debugging

//responsive mixin
@mixin respond-to($breakpoint) {
  $raw-query: map-get(width.$breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
      type-of($raw-query) == "string",
      unquote($raw-query),
      inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

//placing elements center
@mixin center {
  display: inline-flex;
  justify-content: center;
  align-items: center;
}

//sizing elements in squre
@mixin square-size($size) {
  height: $size;
  width: $size;
}
//light transition
@mixin basic-transition($var: all) {
  transition: $var 200ms ease 50ms;
}
//color based on background color
@mixin dynamicColor($color) {
  background-color: $color;
  color: fun.color($color);
}
// mixin for font adding
@mixin font($font) {
  font-family: $font;
}

//semi round dynamic border
@mixin semi-roundBorder($var) {
  border-radius: $var * 2;
}

//on hover effect
@mixin onhover($color) {
  &:hover {
    @if (lightness($color) > 40) {
      background-color: (fun.dark($color));
    } @else {
      background-color: (fun.light($color));
    }
  }
}

// Box shadows
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
     -moz-box-shadow: $shadow;       
          box-shadow: $shadow;
}
@mixin test-shadow($color){
  box-shadow:
0 120px 0 $eggshell, 120px 0 0 $eggshell,
80px 40px 0 $eggshell, 0 80px 0 $eggshell,
80px 0 0 $eggshell, 40px 80px 0 $eggshell,
40px 40px 0 $eggshell, 0 40px 0 $eggshell, 40px 0 0 $eggshell;
}